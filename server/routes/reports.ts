import type { Express, Request, Response } from "express";
import { storage } from "../storage";

import PDFDocument from "pdfkit";
import path from "path";
import { fileURLToPath } from "url";
import ExcelJS from "exceljs";
import { Buffer } from "buffer";

export async function reportsRoutes(app: Express) { 
  const isAuthenticated = (req: Request, res: Response, next: Function) => {
        if (req.session.userId) {
          next();
        } else {
          res.status(401).json({ message: "Unauthorized" });
        }
      };
        const hasRole = (roles: string[]) => {
          return (req: Request, res: Response, next: Function) => {
            if (req.session.userId && roles.includes(req.session.role || "")) {
              next();
            } else {
              res.status(403).json({ message: "Forbidden" });
            }
          };
        };

        app.get(
            "/api/admin/reports",
            isAuthenticated,
            hasRole(["admin", 'teacher']),
            async (req: Request, res: Response) => {
              try {
                const id = req.session.userId!;
                const reports = await storage.getAllReports(id);
                res.json(reports);
              } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:", err);
                res
                  .status(500)
                  .json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤" });
              }
            }
          );

           app.post(
              "/api/admin/reports",
              isAuthenticated,
              hasRole(["admin", 'teacher']),
              async (req: Request, res: Response) => {
                try {
                  const { name, type, period, format, startDate, endDate, data } =
                    req.body;
          
                  const reportData = {
                    name,
                    type,
                    period,
                    format,
                    createdBy: req.session.userId!,
                    data: data || {},
                  };
          
                  const [newReport] = await storage.createReport(reportData);
          
                  res.status(201).json(newReport);
                } catch (err) {
                  console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", err);
                  res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞" });
                }
              }
            );
          
            app.get(
                "/api/admin/reports/:id/download",
                isAuthenticated,
                hasRole(["admin", 'teacher']),
                async (req: Request, res: Response) => {
                  try {
                    const reportId = parseInt(req.params.id);
                    const report = await storage.getReportById(reportId);
            
                    if (!report) {
                      return res.status(404).json({ message: "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
                    }
            
                    const filename = `${report.name}_${
                      new Date().toISOString().split("T")[0]
                    }`;
            
                    switch (report.format) {
                      case "pdf":
                        await generatePDFReport(report, res, filename);
                        break;
                      case "excel":
                        const excelBuffer = await generateExcelContent(report);
                        res.setHeader(
                          "Content-Type",
                          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        );
                        res.setHeader(
                          "Content-Disposition",
                          `attachment; filename="${filename}.xlsx"`
                        );
                        res.send(excelBuffer);
                        break;
                      case "csv":
                        const csvContent = generateCSVContent(report);
                        res.setHeader("Content-Type", "text/csv; charset=utf-8");
                        res.setHeader(
                          "Content-Disposition",
                          `attachment; filename="${filename}.csv"`
                        );
                        res.send("\uFEFF" + csvContent);
                        break;
                      default:
                        const jsonContent = JSON.stringify(report.data, null, 2);
                        res.setHeader("Content-Type", "application/json");
                        res.setHeader(
                          "Content-Disposition",
                          `attachment; filename="${filename}.json"`
                        );
                        res.send(jsonContent);
                    }
                  } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", err);
                    res
                      .status(500)
                      .json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞" });
                  }
                }
              );
              async function generatePDFReport(
                report: any,
                res: Response,
                filename: string
              ) {
                try {
                  const doc = new PDFDocument({ margin: 50 });
            
                  const safeFilename = encodeURIComponent(`${filename}.pdf`);
                  res.setHeader("Content-Type", "application/pdf");
                  res.setHeader(
                    "Content-Disposition",
                    `attachment; filename*=UTF-8''${safeFilename}`
                  );
                  res.flushHeaders();
                  const __filename = fileURLToPath(import.meta.url);
                  const __dirname = path.dirname(__filename);
                  // –°—Ç—Ä–∏–º–∏–º PDF –≤ –æ—Ç–≤–µ—Ç
                  doc.pipe(res);
            
                  // üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .fontSize(20)
                    .text("–û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", { align: "center" });
                  doc.moveDown();
            
                  // üìÑ –ò–Ω—Ñ–æ
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .fontSize(14)
                    .text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á–µ—Ç–µ:");
                  doc.fontSize(12);
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .text(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${report.name}`);
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .text(`–¢–∏–ø: ${getReportTypeLabel(report.type)}`);
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .text(`–ü–µ—Ä–∏–æ–¥: ${getReportPeriodLabel(report.period)}`);
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .text(
                      `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(report.createdAt).toLocaleDateString(
                        "ru-RU"
                      )}`
                    );
                  doc.moveDown();
            
                  if (report.type === "attendance") {
                    doc
                      .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                      .text(`–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: ${report.data.totalClasses}`);
                    doc
                      .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                      .text(`–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${report.data.totalStudents}`);
                    doc.moveDown();
                    if (report.data?.attendanceByGroup?.length) {
                      const fontPath = path.join(__dirname, "../fonts", "TIMES.TTF");
                      doc
                        .font(fontPath)
                        .fontSize(14)
                        .text("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º:", { underline: true });
                      doc.moveDown();
            
                      report.data.attendanceByGroup.forEach((group: any) => {
                        doc
                          .font(fontPath)
                          .fontSize(12)
                          .text(`–ì—Ä—É–ø–ø–∞: ${group.groupName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}`);
            
                        if (group.students?.length) {
                          group.students.forEach((student: any) => {
                            const percent = (student.attendance * 100).toFixed(1); // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
                            doc
                              .font(fontPath)
                              .fontSize(10)
                              .text(`  - ${student.studentName}: ${percent}%`);
                          });
                        } else {
                          doc.font(fontPath).fontSize(10).text("  - –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");
                        }
            
                        doc.moveDown();
                      });
                    }
                  } else if (report.type === "stats") {
                    if (report.data?.teacherActivity?.length) {
                      const fontPath = path.join(__dirname, "../fonts", "TIMES.TTF");
            
                      doc
                        .font(fontPath)
                        .fontSize(14)
                        .text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", { underline: true });
                      doc.moveDown();
            
                      doc
                        .font(fontPath)
                        .fontSize(12)
                        .text(`–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${report.data.totalTeachers}`);
                      doc
                        .font(fontPath)
                        .fontSize(12)
                        .text(
                          `–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${report.data.classesPerTeacher}`
                        );
                      doc.moveDown();
            
                      report.data.teacherActivity.forEach((teacher: any) => {
                        doc
                          .font(fontPath)
                          .fontSize(10)
                          .text(
                            `  - ${teacher.teacherName}: ${teacher.classesCount} –∑–∞–Ω—è—Ç–∏–π`
                          );
                      });
            
                      doc.moveDown();
                    }
                  } else if (report.type === "groups") {
                    if (report.data?.studentsPerGroup?.length) {
                      const fontPath = path.join(__dirname, "../fonts", "TIMES.TTF");
            
                      doc
                        .font(fontPath)
                        .fontSize(14)
                        .text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º:", { underline: true });
                      doc.moveDown();
            
                      doc
                        .font(fontPath)
                        .fontSize(12)
                        .text(`–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: ${report.data.totalGroups}`);
                      doc.moveDown();
            
                      report.data.studentsPerGroup.forEach((group: any) => {
                        doc
                          .font(fontPath)
                          .fontSize(10)
                          .text(
                            `  - ${group.groupName}: ${group.studentsCount} —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤)`
                          );
                      });
            
                      doc.moveDown();
                    }
                  } else if (report.type === "subjects") {
                    if (report.data?.subjectPopularity?.length) {
                      const fontPath = path.join(__dirname, "../fonts", "TIMES.TTF");
            
                      doc
                        .font(fontPath)
                        .fontSize(14)
                        .text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:", { underline: true });
                      doc.moveDown();
            
                      doc
                        .font(fontPath)
                        .fontSize(12)
                        .text(`–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${report.data.totalSubjects}`);
                      doc.moveDown();
            
                      report.data.subjectPopularity.forEach((subject: any) => {
                        doc
                          .font(fontPath)
                          .fontSize(10)
                          .text(
                            `  - ${subject.subjectName}: ${subject.classesCount} –∑–∞–Ω—è—Ç(–∏–π)`
                          );
                      });
            
                      doc.moveDown();
                    }
                  } else {
                    console.log("Unknown report type");
                  }
            
                  // üìé –§—É—Ç–µ—Ä
                  doc.moveDown();
                  doc
                    .font(path.join(__dirname, "../fonts", "TIMES.TTF"))
                    .fontSize(8)
                    .text(
                      `–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${new Date().toLocaleString("ru-RU", {
                                          day: "2-digit",
                                          month: "2-digit",
                                          year: "numeric",
                                          hour: "2-digit",
                                          minute: "2-digit",
                                        })}`,
                      { align: "center",  }
                    );
            
                  doc.end(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                } catch (err) {
                  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:", err);
                  if (!res.headersSent) {
                    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF");
                  }
                }
              }
             app.delete(
    "/api/admin/reports/:id",
    isAuthenticated,
    hasRole(["admin", 'teacher']),
    async (req: Request, res: Response) => {
      try {
        const reportId = parseInt(req.params.id);

        const report = await storage.getReportById(reportId);
        if (!report) {
          return res.status(404).json({ message: "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        await storage.deleteReport(reportId);

        res.status(200).json({ message: "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞" });
      }
    }
  );

  function getReportTypeLabel(type: string): string {
    const types: { [key: string]: string } = {
      attendance: "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å",
      stats: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º",
      groups: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞",
      subjects: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º",
    };
    return types[type] || type;
  }

  function getReportPeriodLabel(period: string): string {
    const periods: { [key: string]: string } = {
      day: "–î–µ–Ω—å",
      week: "–ù–µ–¥–µ–ª—è",
      month: "–ú–µ—Å—è—Ü",
      quarter: "–ö–≤–∞—Ä—Ç–∞–ª",
      year: "–ì–æ–¥",
    };
    return periods[period] || period;
  }

  function generateCSVContent(report: any): string {
    let csv = `–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞,${report.name}\n–¢–∏–ø,${getReportTypeLabel(
      report.type
    )}\n–ü–µ—Ä–∏–æ–¥,${getReportPeriodLabel(report.period)}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è,${new Date(
      report.createdAt
    ).toLocaleDateString("ru-RU")}\n\n`;
    if (report.type === "attendance") {
      csv += `–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π,${report.data.totalClasses}\n–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤,${report.data.totalStudents}\n\n`;

      if (report.data?.attendanceByGroup?.length) {
        csv += "–ì—Ä—É–ø–ø–∞,–°—Ç—É–¥–µ–Ω—Ç,–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (%)\n";
        for (const group of report.data.attendanceByGroup) {
          if (group.students?.length) {
            for (const student of group.students) {
              const percent = (student.attendance * 100).toFixed(1);
              csv += `"${group.groupName}","${student.studentName}",${percent}\n`;
            }
          } else {
            csv += `"${group.groupName}","–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",0\n`;
          }
        }
      }
      return csv;
    } else if (report.type === "stats") {
      if (report.data?.totalTeachers !== undefined) {
        csv = `–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π,${report.data.totalTeachers}\n`;
      }
      if (report.data?.classesPerTeacher !== undefined) {
        csv += `–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è,${report.data.classesPerTeacher}\n\n`;
      }

      if (report.data?.teacherActivity?.length) {
        csv += "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π\n";
        for (const teacher of report.data.teacherActivity) {
          csv += `"${teacher.teacherName}",${teacher.classesCount}\n`;
        }
        csv += "\n";
      }
      return csv;
    } else if (report.type === "groups") {
      if (report.data?.totalGroups !== undefined) {
        csv += `–í—Å–µ–≥–æ –≥—Ä—É–ø–ø,${report.data.totalGroups}\n\n`;
      }

      if (report.data?.studentsPerGroup?.length) {
        csv += "–ì—Ä—É–ø–ø–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n";
        for (const group of report.data.studentsPerGroup) {
          csv += `"${group.groupName}",${group.studentsCount}\n`;
        }
        csv += "\n";
      }
      return csv;
    } else if (report.type === "subjects") {
      if (report.data?.totalSubjects !== undefined) {
        csv += `–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤,${report.data.totalSubjects}\n\n`;
      }

      if (report.data?.subjectPopularity?.length) {
        csv += "–ü—Ä–µ–¥–º–µ—Ç,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π\n";
        for (const subject of report.data.subjectPopularity) {
          csv += `"${subject.subjectName}",${subject.classesCount}\n`;
        }
        csv += "\n";
      }
      return csv;
    } else {
      console.log("Unknown report type");
      return "";
    }
  }

  async function generateExcelContent(report: any): Promise<Buffer> {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("–û—Ç—á–µ—Ç");

    worksheet.addRow(["–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", report.name]);
    worksheet.addRow(["–¢–∏–ø", getReportTypeLabel(report.type)]);
    worksheet.addRow(["–ü–µ—Ä–∏–æ–¥", getReportPeriodLabel(report.period)]);
    worksheet.addRow([
      "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
      new Date(report.createdAt).toLocaleDateString("ru-RU"),
    ]);
    worksheet.addRow([]);

    if (report.type === "attendance") {
      worksheet.addRow(["–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π", report.data.totalClasses]);
      worksheet.addRow(["–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", report.data.totalStudents]);
      worksheet.addRow([]);

      if (report.data?.attendanceByGroup?.length) {
        worksheet.addRow(["–ì—Ä—É–ø–ø–∞", "–°—Ç—É–¥–µ–Ω—Ç", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (%)"]);
        for (const group of report.data.attendanceByGroup) {
          if (group.students?.length) {
            for (const student of group.students) {
              const percent = (student.attendance * 100).toFixed(1);
              worksheet.addRow([group.groupName, student.studentName, percent]);
            }
          } else {
            worksheet.addRow([group.groupName, "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", "0"]);
          }
        }
      }
    } else if (report.type === "stats") {
      worksheet.addRow(["–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", report.data.totalTeachers]);
      worksheet.addRow([
        "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        report.data.classesPerTeacher,
      ]);
      worksheet.addRow([]);

      if (report.data?.teacherActivity?.length) {
        worksheet.addRow(["–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π"]);
        for (const teacher of report.data.teacherActivity) {
          worksheet.addRow([teacher.teacherName, teacher.classesCount]);
        }
        worksheet.addRow([]);
      }
    } else if (report.type === "groups") {
      worksheet.addRow(["–í—Å–µ–≥–æ –≥—Ä—É–ø–ø", report.data.totalGroups]);
      worksheet.addRow([]);

      if (report.data?.studentsPerGroup?.length) {
        worksheet.addRow(["–ì—Ä—É–ø–ø–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"]);
        for (const group of report.data.studentsPerGroup) {
          worksheet.addRow([group.groupName, group.studentsCount]);
        }
        worksheet.addRow([]);
      }
    } else if (report.type === "subjects") {
      worksheet.addRow(["–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", report.data.totalSubjects]);
      worksheet.addRow([]);

      if (report.data?.subjectPopularity?.length) {
        worksheet.addRow(["–ü—Ä–µ–¥–º–µ—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π"]);
        for (const subject of report.data.subjectPopularity) {
          worksheet.addRow([subject.subjectName, subject.classesCount]);
        }
        worksheet.addRow([]);
      }
    } else {
      console.log("Unknown report type:", report.type);
    }

    const buffer = await workbook.xlsx.writeBuffer();
    return Buffer.from(buffer);
  }

}